#!/usr/bin/php
<?php

/****
 * The codegems utility 
 * http://github.com/kamasheto/codegems
 *
 *
 * author @kamasheto
 */


/**** 
 * Functions 
 */

function get_param($index) {
  $args = $_SERVER['argv'];
  
  if ($index >= count($args)) {
    return null;
  }

  return $_SERVER['argv'][$index];
}

function println($out) {
  global $level;

  print $out . "\n";
  for ($i = 0; $i < $level; $i++) {
    print '  ';
  }
}

function write_info() {
  global $project_info;
  print "Updating gems info... ";
  $project_info = array_unique_r($project_info);
  file_put_contents('.codegems.inf', serialize($project_info));
  println("done");
}

function array_unique_r($array) {
  $array = array_unique($array);

  foreach ($array as $k => $v) {
    if (is_array($v)) {
      $array[$k] = array_unique_r($v);
    }
  }

  return $array;
}

function codegems_project() {
  return file_exists('.codegems.php') && file_exists('.codegems.inf');
}

function run($cmd) {
  `$cmd 2>&1`;
}

function copy_codegems() {
  global $codegems;

  foreach ($codegems as $gems) {

  }
}

function pull_repos() {
  global $codegems, $project_info;

  println("Cloning repos for the first time..."); tab();

  foreach ($codegems as $gem) {
    $project_info['installed_gems'][] = $gem;
    $dir = "/tmp/{$gem['name']}";
    if (file_exists($dir) and is_dir($dir)) {
      print "Updating {$gem['name']}... ";
      run("git pull");
    } else {
      print("Cloning {$gem['name']}... ");
      run("git clone {$gem['href']} $dir");
    }
    println("done");
  }

  tab(-1);
}

function tab($sign = 1) {
  global $level;

  $level = $level + 1 * $sign;
}

/**** 
 * Variables
 */
$project_info = array('framework' => '-', 'installed_gems' => array());
$level = 0;



/**** 
 * File contents
 */

$file_codegems = <<<EOF
<?php

// This is a PHP array that includes what gems you want included in your project
\$codegems = array(
  
  // For each gem you need, add an array
  // Options are available at #href
  array(
    # Name of codegem (required)
    'name' => '',
    
    # Link to repo. Read permission enough. (required)
    'href' => '',

    # Tag/commit to get. Default: latest (optional)
    'version' => 'latest',
  ),

)
EOF;

/**** 
 * BRAIN
 */

if (get_param(1) != 'init') {
  if (!codegems_project()) {
    println("This does not seem like a codegems project. Get started by init: codegems init"); 
    exit(0);
  } else {
    include '.codegems.php';
    $project_info = file_get_contents('.codegems.inf');
    $project_info = unserialize($project_info);
  }
}

switch (get_param(1)) {
  case 'init':
    println("Initializing codegems project... "); tab();
    if (! file_exists('.codegems.php')) {
      print "Create .codegems.php... ";
      file_put_contents('.codegems.php', $file_codegems);
      println("done");
    }

    $index = null;

    if (file_exists('index.php')) {
      $index = 'index.php';
    }

    if ($index) {
      print "Inspecting project framework... ";
      $index = file_get_contents($index);

      $found_framework = false;
      $frameworks = array('CodeIgniter', 'CakePHP', 'WordPress', 'Drupal');
      foreach ($frameworks as $framework) {
        if (strpos($index, $framework) !== false) {
          $found_framework = true;
          $project_info['framework'] = $framework;
          println("found $framework");
          break;
        }
      } 

      if (! $found_framework) {
        println("did not recognize framework");
      }
    }

    tab(-1);
    write_info();

    break;


  case 'destroy':
    $rm = array('.codegems.php', '.codegems.inf');
    foreach ($rm as $r) {
      unlink($r);
    }
    break;

  case 'test':
    break;

  case 'sync':
    pull_repos();
    write_info();
    break;

  case 'help':
  default:


    switch(get_param(2)) {
      case 'init':
        println("
        Initializes the codegems project");
        break;
      default:
        print "Usage: codegems help <cmd>
Possible commands:
- init
- sync
- destroy
";
        break;
    }

    break;
}















